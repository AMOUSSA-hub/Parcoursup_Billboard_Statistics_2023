<etablissement_tab class="zeubi">

<div class="box has-background-light has-text-centered">
<div class="box has-background-light has-text-centered">
 <nav class="level"> <div class="level-left">Moyenne des admis</div><div class="level-right">{this.average_form}</div></nav>
 <nav class="level"> <div class="level-left">Nb formations</div><div class="level-right">{this.props.count}</div></nav>
 <nav class="level"> <div class="level-left">capacité</div><div class="level-right">{this.capacity}</div></nav>
  <nav class="level"> <div class="level-left">  Sélectivité ({this.selectivity}%)  </div><div class="level-right"><progress class="progress is-warning" value={this.selectivity} max="100">{this.selectivity}</progress></div></nav>
  
</div>

  <jauge ></jauge><br>
</div>
<iframe src={this.source_map} width="800" height="600" frameborder="0"></iframe>
<div id="map"></div>
<mymap coordonnee={this.coord}></mymap>

                <table class="table cube2" >
                    <thead>
                    <tr>
                        <th><abbr title="Nom">Nom</abbr></th>
                        <th>Ville</th>
                        <th><abbr title="Departement">Dpt</abbr></th>
                        <th><abbr title="Moyenne">Moyenne</abbr></th>
                        <th><abbr title="Selectivite">Selectivité</abbr></th>
                    </tr>
                    </thead>


                   
                    <tfoot>
                        <tr>
                            <th><abbr title="Nom">Nom</abbr></th>
                            <th>Ville</th>
                            <th><abbr title="Departement">Dpt</abbr></th>
                            <th><abbr title="Moyenne">Moyenne</abbr></th>
                            <th><abbr title="Selectivite">Selectivité</abbr></th>
                        </tr>
                    </tfoot>
                    <tbody>
                <tr class="row" each={item in this.items}><td>{item.g_ea_lib_vx}</td><td>{item.ville_etab}</td><td>{item.dep}</td><td>{ Average(item.acc_sansmention,item.acc_ab,item.acc_b,item.acc_tb,item.acc_tbf)}</td><td>{item.taux_acces_ens}%<progress class="progress is-warning" value={item.taux_acces_ens} max="100">{item.taux_acces_ens}</progress></td></tr>
                </tbody>

                
                </table>
<style>
.cube2{
  width:98%;
    display:block;
    height: calc(100vh - 420px);
    overflow-y: auto;
}
.zeubi{
  line-height:0;
  padding:0;
}
</style>
        <script>
    


    
    export default {

        items : [],
        average_form:0,
        capacity: 0,
        selectivity : 0,
        source_map:"",
        coord: [],

        
        

         onBeforeUpdate(){


           this.source_map = "https://data.enseignementsup-recherche.gouv.fr/explore/embed/dataset/fr-esr-parcoursup/map/?timezone=Europe%2FBerlin&rows=2&sort=tri&refine.fil_lib_voe_acc="+encodeURIComponent(this.props.libelle)+"&refine.form_lib_voe_acc="+encodeURIComponent(this.props.formation)+"&location=2,19.03276,-21.32469&basemap=e69ab1&static=true&datasetcard=true&scrollWheelZoom=true"
            this.renderTab(this.props.formation,this.props.libelle)
            // this.GetCoord()
             this.GetAverage()
             this.GetCapacity()
             this.GetSelectivity()
          
           
            

         },
      

           async renderTab(form,lib){

            this.items = []

         

                 if(!localStorage.getItem(form+lib)){
              try {
                const response = await fetch('https://data.enseignementsup-recherche.gouv.fr/api/records/1.0/search/?dataset=fr-esr-parcoursup&q=&rows='+this.props.count+'&sort=tri&facet=session&facet=contrat_etab&facet=cod_uai&facet=g_ea_lib_vx&facet=dep_lib&facet=region_etab_aff&facet=acad_mies&facet=ville_etab&facet=lib_for_voe_ins&facet=select_form&facet=fili&facet=form_lib_voe_acc&facet=fil_lib_voe_acc&facet=detail_forma&facet=tri&facet=cod_aff_form&facet=etablissement_id_paysage&facet=composante_id_paysage&refine.fil_lib_voe_acc='+encodeURIComponent(lib)+'&refine.form_lib_voe_acc='+encodeURIComponent(form)+'&timezone=Europe%2FBerlin');
                const data = await response.json();
                this.items = data.records.map(elements => elements.fields)
                  
                localStorage.setItem(form+lib,JSON.stringify(this.items))
                this.update()

              } catch (error) {
                console.error(error);
                localStorage.clear();
              }
      }else{


        this.items = JSON.parse(localStorage.getItem(form+lib))
        
         
        
      }

   


            },

            Average(admis_SM,admis_AB,admis_B,Admis_TB,admis_F){

                 total = admis_SM+admis_AB+admis_B+Admis_TB+admis_F
                 average = ((admis_SM*10)+(admis_AB*12)+(admis_B*14)+(Admis_TB*16)+(admis_F*18))/total


              
              if(!isNaN(average) ){
              
              return parseFloat(average.toFixed(1)) ;

              }
              else{
                
                return 0
              }
            },


            GetAverage(){

              total_av= 0
              
              for(let i =0 ; i<= this.items.length-1;i++ ){
                
                
                
               total_av = total_av+  this.Average(this.items[i].acc_sansmention,this.items[i].acc_ab,this.items[i].acc_b,this.items[i].acc_tb,this.items[i].acc_tbf)
                

              }


            this.average_form =  (total_av/this.props.count).toFixed(1)

            
             

              
            },

            GetCapacity(){

                total_cap = 0

                for(let i =0 ; i<= this.items.length-1;i++ ){

                  total_cap =total_cap + this.items[i].capa_fin
                }

                this.capacity = (total_cap/this.props.count).toFixed(0)
              

              
            },

            GetSelectivity(){

                  total_select = 0 ;

                for(let i =0 ; i<= this.items.length-1;i++ ){
                
                
                if(!isNaN(this.items[i].taux_acces_ens)){   
               total_select = total_select + this.items[i].taux_acces_ens
                }

              }

              

            this.selectivity =  Math.round((total_select/this.props.count))
              
            },


            GetCoord(){

              for(let i = 0 ; i<= this.items.length-1; i++){


                this.coord.push(this.items[i].g_olocalisation_des_formations)

            }



            }


            

            }




    


       



    



    </script>





 </etablissement_tab>